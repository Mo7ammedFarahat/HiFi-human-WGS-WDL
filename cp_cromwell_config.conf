include required(classpath("application"))

backend {
  default = SLURM
  providers {
    SLURM {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
      config {
	root = "/scratch3/projects/003/gideonaw/PacBio_Workflow/HiFi-human-WGS-WDL/workflows/sample_analysis/cromwell-executions"
        runtime-attributes = """
        Int runtime_minutes = 3600
        Int cpu = 32
        Int memory = 8000
        String queue = "Main"
        String? docker
	"""

	submit = """
            sbatch -J ${job_name} -D ${cwd} -o ${out} -e ${err} -t ${runtime_minutes} -p ${queue} \
            ${"-c " + cpu} \
	    --mem-per-cpu ${memory} \
            --wrap "/bin/bash ${script}"
    """  
     submit-docker = """
                    # Make sure the SINGULARITY_CACHEDIR variable is set. If not use a default
                    # based on the users home.
                    if [ -z $SINGULARITY_CACHEDIR ]; 
                      then CACHE_DIR=/scratch3/users/$USER/.singularity/cache
                      else CACHE_DIR=$SINGULARITY_CACHEDIR
                    fi
                    # Make sure cache dir exists so lock file can be created by flock
                    mkdir -p $CACHE_DIR  
                    LOCK_FILE=$CACHE_DIR/singularity_pull_flock
                    # Create an exclusive filelock with flock. --verbose is useful for 
                    # for debugging, as is the echo command. These show up in `stdout.submit`.
                    IMAGE=$CACHE_DIR/$(echo ${docker} | sed 's/\//_/'g).sif
                    if [ ! -f $IMAGE ]; then
                        flock --verbose --exclusive --timeout 900 $LOCK_FILE \
                        singularity pull --force $IMAGE docker://${docker} &&
                        echo "successfully pulled ${docker}!"
                    else
                        echo "Image $IMAGE already exists. Yay"
                    fi
  
                    # Submit the script to SLURM
                    sbatch \
                      --wait \
                      -J ${job_name} \
                      -D ${cwd} \
                      -o ${cwd}/execution/stdout \
                      -e ${cwd}/execution/stderr \
                      -t ${runtime_minutes} \
                      -p ${queue} \
                      ${"-c " + cpu} \
                      --mem-per-cpu=${memory} \
                      --wrap "singularity exec --bind ${cwd}:${docker_cwd} $IMAGE ${job_shell} ${docker_script}"
                """
    kill = "scancel ${job_id}"
        check-alive = "squeue -j ${job_id}"
        job-id-regex = "Submitted batch job (\\d+).*"
      }
    }
  }
}
